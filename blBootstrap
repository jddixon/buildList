#!/usr/bin/python3
#
# ~/dev/py/buildList/blBootstrap

import base64
import hashlib
import os
import shutil
import sys
from argparse import ArgumentParser
from Crypto.PublicKey import RSA
from nlhtree import NLHLeaf, NLHTree
from xlattice import u
from xlattice.lfs import touch
from rnglib import SimpleRNG

from buildList import *


def makedir_p(path, mode):
    try:
        os.makedirs(path, mode)
    except OSError as e:
        if e.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else:
            raise


def doIt(args):
    dataDir = args.dataDir
    exDir = args.exDir
    force = args.force
    listFile = args.listFile
    nodeDir = args.nodeDir
    testing = args.testing
    title = args.title
    uDir = args.uDir
    verbose = args.verbose

    uTmp = os.path.join(uDir, 'tmp')

    if os.path.exists(exDir):
        print("deleting existing directory %s" % exDir)
        shutil.rmtree(exDir)

    subDir1 = os.path.join(dataDir, 'subDir1')
    subDir2 = os.path.join(dataDir, 'subDir2')
    subDir3 = os.path.join(dataDir, 'subDir3')
    subDir4 = os.path.join(dataDir, 'subDir4')
    subDir41 = os.path.join(subDir4, 'subDir41')
    subDir411 = os.path.join(subDir41, 'subDir411')

    for d in [dataDir, nodeDir, uDir, uTmp]:
        makedir_p(d, 0o755)
    for d in [subDir1, subDir2, subDir3, subDir4]:
        makedir_p(d, 0o755)
    makedir_p(subDir41, 0o755)
    makedir_p(subDir411, 0o755)

    # files to be populaed with random data
    rng = SimpleRNG()
    data1 = os.path.join(dataDir, 'data1')
    data11 = os.path.join(subDir1, 'data11')
    data2 = os.path.join(dataDir, 'data2')
    data31 = os.path.join(subDir3, 'data31')
    data4111 = os.path.join(subDir411, 'data31')

    for path in [data1, data11, data2, data31, data4111]:
        count = 16 + rng.nextInt16(2048)
        data = bytearray(count)
        rng.nextBytes(data)
        with open(path, 'wb') as f:
            f.write(data)

    # empty file(s)
    data12 = os.path.join(subDir1, 'data12')
    for path in [data12]:
        touch(path)

    # should be >= 2048, but this is just testing
    skPriv = RSA.generate(1024)
    pathToKey = os.path.join(nodeDir, "skPriv.pem")
    with open(pathToKey, 'wb') as f:
        f.write(skPriv.exportKey('PEM'))
    sk = skPriv.publickey()

    bl = BuildList.createFromFileSystem(title, dataDir, sk,
                                        usingSHA1=True, exRE=None, matchRE=None)
    bl.sign(skPriv)
    blSer = bl.toString()
    with open(listFile, 'w') as f:
        f.write(blSer)

    # XXX WORKING HERE

    # XXX need checks on uDir

    bl.saveToUDir(dataDir, uDir)
    ok = bl.checkInUDir(dataDir, uDir)    # whether all leaf nodes are present
    if not ok:
        print("check walk on example/ failed")


def main():
    """
    Expect a command like
        blBootstrap [options]

    This program creates a directory tree like

        example/
            node                # was .xlattice
                skPriv          # PEM serialization
            dataDir/
                data1
                subDir1/
                    data11
                    data12      # empty
                data2
                subDir2/
                subDir3/
                    data31
                subDir4/
                    subDir41
                        subDir411
                            data4111
            dataDir.bld
            uDir/
                00
                ...
                ff
                tmp/

    skPriv is the RSA private key used to sign the example.bld
    build list.

    The information under example/dataDir is a small directory tree.
    The data* are data files containing quasi-random data.  Both the
    file length and the contents are random.  data12 is an empty file.
    Subdirectory subDir2 is an empty subdirectory.

    dataDir.bld is a build list for dataDir.  The build list contains
    the public part of the RSA key used to sign the list, its title,
    and a UTC timestamp, the time at which the list was signed.  The
    body of the list is an indented list of the files under dataDir/,
    with a line for each file, each line containing the SHA content
    hash of the document and its title.  The build list ends with a
    digital signature over the earlier part of the document.  In this
    example, the RSA private key used in signing the document in
    contained in node/skPriv.

    uDir/ contains the same set of files as under dataDir/, but
    instead of being organized by name it is organized by content
    key, by the SHA1 hash of the file.

    The data under example/ is sufficient to verify the correctness of
    the build list and the 1-to-1 relationship between the files under
    example/datadir/ and those under example/uDir/

    """

    # parse the command line ----------------------------------------

    DESC = 'generate a sample data tree, write a build list, and create a corresponding content-keyed store'

    parser = ArgumentParser(description=DESC)

    parser.add_argument('-e', '--exDir', default='example',
                        help='example directory, defaults to example/')

    parser.add_argument('-f', '--force', action='store_true',
                        help='overwrite any existing example/ directory')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    if args.testing and args.exDir:
        if args.exDir[0] == '/':
            args.exDir = args.exDir[1:]
        args.exDir = os.path.join('tmp', args.exDir)

    # sanity chesks -------------------------------------------------
    if args.exDir[0] == '/':
        print("example dir must not be absolute path")
        parser.print_usage()
        sys.exit(1)
    if args.exDir[0] == '.':
        print("example dir name must not begin with dot ('.')")
        parser.print_usage()
        sys.exit(1)

    if (not args.force) and os.path.exists(args.exDir):
        print(
            "example directory %s exists but force (-f) not specified" %
            args.exDir)
        parser.print_usage()
        sys.exit(1)

    # fixups --------------------------------------------------------
    if args.testing:
        args.exDir = os.path.join('test', args.exDir)
    args.dataDir = os.path.join(args.exDir, 'dataDir')
    args.listFile = os.path.join(args.exDir, 'example.bld')
    args.nodeDir = os.path.join(args.exDir, 'node')
    args.title = 'sample build list'
    args.uDir = os.path.join(args.exDir, 'uDir')

    # complete setup ------------------------------------------------
    appName = 'blBootstrap %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('dataDir      = ' + str(args.dataDir))
        print('exDir        = ' + str(args.exDir))
        print('force        = ' + str(args.force))
        print('listFile     = ' + str(args.listFile))
        print('nodeDir      = ' + str(args.nodeDir))
        print('testing      = ' + str(args.testing))
        print('title        = ' + str(args.title))
        print('uDir         = ' + str(args.uDir))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    doIt(args)

if __name__ == '__main__':
    main()
