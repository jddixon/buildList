#!/usr/bin/python3
#
# ~/dev/py/buildlist/bl_listgen

"""
Given the path to a directory, create a BuildList and optionally
populate a content-keyed store uDir.
"""

import os
import sys

from argparse import ArgumentParser

from optionz import dump_options
from xlattice import check_hashtype, parse_hashtype_etc, fix_hashtype

from xlutil import get_exclusions, timestamp_now
from buildlist import(__version__, __version_date__, __file__,
                      BuildList,
                      check_dirs_in_path, generate_rsa_key, rm_f_dir_contents)


def doit(options):
    """
    Given the command-line options, create the BuildList.

    Optionally serialize the BuildList, append to a log, and populate
    the content-keyed store using the selected SHA hash type.

    If options.u_path is None, don't save to u_path.
    """

    blist = BuildList.list_gen(
        title=options.title,
        data_dir=options.data_dir,
        dvcz_dir=options.dvcz_dir,
        list_file=options.list_file,
        key_file=options.key_file,
        excl=options.excl,
        logging=options.logging,
        u_path=options.u_path,
        hashtype=options.hashtype,
        using_indir=options.using_indir)

    print(
        "BuildList written to %s" %
        os.path.join(
            options.dvcz_dir,
            options.list_file))

    # confirm that whatever is in the BuildList is now in u_path
    if options.u_path:
        unmatched = blist.tree.check_in_u_dir(options.u_path)
        if unmatched:
            for unm in unmatched:
                print("NOT IN UDIR: ", unm)


def get_args():
    """ Collect command-line arguments. """

    now = timestamp_now()
    app_name = 'bl_listgen %s' % __version__
    key_path = os.path.join(os.environ['DVCZ_PATH_TO_KEYS'], 'skPriv.pem')

    # parse the command line ----------------------------------------

    desc = 'generate build list for directory, optionally populating u_path'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-b', '--list_file', default='lastBuildList',
                        help='path to build list')

    parser.add_argument('-D', '--dvcz_dir', default='.dvcz',
                        help='dvcz directory (default=.dvcz)')

    parser.add_argument('-d', '--data_dir', default='.',
                        help='data directory for build list (default=./)')

    parser.add_argument('-I', '--using_indir', action='store_true',
                        help='write to U_PATH/in/USER_ID')

    parser.add_argument('-i', '--ignore_file', default='.dvczignore',
                        help='file containing wildcards (globs) for files to ignore')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show options and exit')

    parser.add_argument('-k', '--key_file', default=key_path,
                        help='path to RSA private key for signing')

    parser.add_argument('-L', '--logging', action='store_true',
                        help="append timestamp and BuildList hash to to .dvcz/builds")

    # NOT CURRENTLY SUPPORTED (may never be)
    parser.add_argument('-M', '--matchPat', action='append',
                        help='include only files matching this pattern')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-t', '--title',
                        help='title for build list')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='display version number and exit')

    # -1,-2,-3, hashtype, -v/--verbose
    parse_hashtype_etc(parser)

    parser.add_argument('-X', '--exclusions', action='append',
                        help='do not include files/directories matching this pattern')

    args = parser.parse_args()

    if args.showVersion:
        print(app_name)
        sys.exit(0)

    args.app_name = app_name
    args.now = now
    return parser, args


def sanity_checks(parser, args):
    """ Check for option values that don't make sense. """
    if not args.just_show:
        check_hashtype(args.hashtype)

        if (not args.data_dir) or (args.data_dir == ''):
            print("no root directory specified")
            parser.print_usage()
            sys.exit(1)

        if not os.path.isdir(args.data_dir):
            print("root directory '%s' isn't a directory" % args.data_dir)
            parser.print_usage()        # short form
            # parser.print_help()       # long form (what you get from -h)
            sys.exit(1)

        if args.testing:
            args.key_file = os.path.join(args.dvcz_dir, 'skPriv.pem')
        if not os.path.exists(args.key_file):
            check_dirs_in_path(args.key_file)
            if args.testing:
                generate_rsa_key(args.key_file, 1024)
            else:
                generate_rsa_key(args.key_file, 2048)


def check_args(parser, args):
    """ Check and possibly edit command-line arguments. """

    fix_hashtype(args)

    args.curDir = os.getcwd()
    if os.path.exists(args.ignore_file):
        args.excl = get_exclusions(args.curDir)
    else:
        print("WARNING: ignore file '%s' NOT FOUND" % args.ignore_file)
        args.excl = []
    if not 'build' in args.excl:
        args.excl.append('build')

    if args.exclusions:
        args.excl.extend(args.exclusions)

    if args.testing:
        args.dvcz_dir = os.path.join('tmp/dvcz')
        if os.path.exists(args.dvcz_dir):
            # must be a relative path
            rm_f_dir_contents(args.dvcz_dir)      # empties the directory

    os.makedirs(args.dvcz_dir, 0o755, exist_ok=True)
    # WE HAVE args.dvcz_dir

    sanity_checks(parser, args)

    # u_path ------------------------------------------------
    if args.testing and args.u_path:
        if args.u_path[0] == '/':
            args.u_path = args.u_path[1:]
        args.u_path = os.path.join('tmp', args.u_path)
        if os.path.exists(args.u_path):
            rm_f_dir_contents(args.u_path)

    if args.u_path:
        os.makedirs(args.u_path, 0o755, exist_ok=True)

    # title -----------------------------------------------
    if args.data_dir:
        if not args.title or args.title == '':
            _, _, base = args.data_dir.rpartition('/')
            args.title = base
    args.title = str(args.title)


def show_args(args):
    """ Maybe show options and such. """
    if args.verbose or args.just_show:
        print("%s %s" % (args.app_name, __version_date__))
        print(dump_options(args))

    if args.just_show:
        sys.exit(0)


def main():
    """
    Collect command line options and execute the command if required.
    """

    parser, args = get_args()
    check_args(parser, args)
    show_args(args)

    # do what's required --------------------------------------------

    # try: ACQUIRE LOCK ON PROJECT, that is, on the name of the project
    doit(args)

    # finally: RELEASE LOCK ON PROJECT


if __name__ == '__main__':
    main()
