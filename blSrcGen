#!/usr/bin/python3
#
# ~/dev/py/buildList/blSrcGen

import os, sys
from argparse   import ArgumentParser
from shutil     import rmtree
from buildList  import *

def makeDataDir(args):

    listFile    = args.listFile
    rootDir     = args.rootDir
    testing     = args.testing
    title       = args.title
    uDir        = args.uDir
    verbose     = args.verbose

    # XXX STUB XX

def main():
    """
    Expect a command like
        blSrcGen [options] 

    """

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------
    
    DESC = 'given a build list and uDir, regenerate the root directory'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--listFile', 
        help='root directory for build list')
    
    parser.add_argument('-f', '--force', action='store_true',
        help='do it despite objections')

    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-r', '--rootDir',
        help='root directory for build list (REQUIRED)')

    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-t', '--title', 
        help='title for build list')

    parser.add_argument('-u', '--uDir', 
        help='path to uDir (relative to tmp/ if testing)')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    if args.testing and args.rootDir:
        if args.rootDir[0] == '/':
            args.rootDir = args.rootDir[1:]
        args.rootDir = os.path.join('tmp', args.rootDir)

    if args.testing and args.uDir:
        if args.uDir[0] == '/':
            args.uDir = args.uDir[1:]
        args.uDir = os.path.join('tmp', args.uDir)

    # sanity checks -------------------------------------------------
    def giveUp(msg):
        print(msg)
        parser.print_usage()
        sys.exit(1)

    if not args.justShow:
        if args.rootDir == None or args.rootDir == '':
            giveUp("you must specify a root directory")
   
        if args.force and os.path.exists(args.rootDir):
            try:
                rmtree(args.rootDir)
            except Exception as e:
                print("tried to delete %s; ignoring %s" % (
                    args.rootDir, e))

        os.mkdir(args.rootDir, 0o755)

        if args.rootDir and not os.path.isdir(args.rootDir):
            giveUp("rootDir %s is not a directory" % args.rootDir)

        if not args.uDir:
            giveUp("you must specify uDir")
        elif os.path.exists(args.uDir) and not os.path.isdir(args.uDir):
            giveUp("uDir %s is not a directory" % args.uDir)

        if not os.path.exists(args.uDir):
            # XXX could/should check path
            os.mkdir(args.uDir, 0o755) 

        # title -------------------------------------------
        if not args.title or args.title == '':
            junk, sep, base = args.rootDir.rpartition('/')
            args.title = base
        else:
            # this can contain spaces and other undesirable characters
            base = args.title
    
        # listFile ----------------------------------------
        if not args.listFile or args.listFile == '':
            giveUp('no build list file specified')

        if args.testing:
            if args.listFile[0] == '/':
                args.listFile = args.listFile[1:]
            args.listFile = os.path.join('tmp', args.listFile)
    
        if not os.path.isfile(args.listFile):
            giveUp("list file %s does not exist" % args.listFile)
    
    # complete setup ------------------------------------------------
    appName = 'blSrcGen %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('force        = ' + str(args.force))
        print('listFile     = ' + str(args.listFile))
        print('rootDir      = ' + str(args.rootDir))
        print('testing      = ' + str(args.testing))
        print('title        = ' + str(args.title))
        print('uDir         = ' + str(args.uDir))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    makeDataDir(args)

        
if __name__ == '__main__':
    main()

