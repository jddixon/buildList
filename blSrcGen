#!/usr/bin/python3
#
# ~/dev/py/buildList/blSrcGen

import os
import re
import sys

from argparse import ArgumentParser
from shutil import rmtree
from buildList import __file__, BuildList

def makeDataDir(options):

    dataPath = options.dataPath
    keyFile = options.keyFile
    listFile = options.listFile
    testing = options.testing
    uPath = options.uPath
    verbose = options.verbose

    verifying = keyFile != ''

    if dataPath and dataPath[-1] == '/':      # trailing slash
        dataPath = dataPath[:-1]
    if uPath and uPath[-1] == '/':            # trailing slash
        uPath = uPath[:-1]

    with open(listFile, 'r') as f:
        data = f.read()
    bl = BuildList.parse(data, usingSHA1=True)  # XXX HACK XXX

    bl.populateDataDir(uPath, path)

def main():
    """
    Expect a command like
        blSrcGen [options]

    """

    # program defaults ----------------------------------------------

    __version__ = re.search("__version__\s*=\s*'(.*)'",
                            open(__file__).read()).group(1)
    __version_date__ = re.search("__version_date__\s*=\s*'(.*)'",
                                 open(__file__).read()).group(1)

    APP_NAME = 'blSrcGen %s' % __version__
    KEY_PATH = os.path.join(os.environ['DVCZ_PATH_TO_KEYS'], 'skPriv.pem')
    U_PATH   = os.environ['DVCZ_UDIR']

    # parse the command line ----------------------------------------

    DESC = 'given a build list and uDir, regenerate the data directory'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--listFile',
                        help='where to find the  build list')

    parser.add_argument('-d', '--dataDir',
                        help='where to write the new tree')

    parser.add_argument('-f', '--force', action='store_true',
                        help='do it despite objections')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-k', '--keyFile', default=KEY_PATH,
                        help='path to RSA key for verifying dig sig')

    # NOT CURRENTLY SUPPORTED (may never be)
    parser.add_argument('-M', '--matchOn', action='append',
                        help='include only files matching this pattern')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='this is a test run')

    parser.add_argument('-u', '--uPath', default=U_PATH,
                        help='path to uDir (relative to tmp/ if testing)')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='display version number and exit')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    parser.add_argument('-X', '--exclusions', action='append',
                        help='do not include files/directories matching this pattern')

    args = parser.parse_args()

    if args.showVersion:
        print(APP_NAME)
        sys.exit(0)

    # fixups --------------------------------------------------------
    if args.testing and args.dataDir:
        if args.dataDir[0] == '/':
            args.dataDir = args.dataDir[1:]
        args.dataDir = os.path.join('tmp', args.dataDir)

    if args.testing and args.uPath:
        if args.uPath[0] == '/':
            args.uPath = args.uPath[1:]
        args.uPath = os.path.join('tmp', args.uPath)

    # sanity checks -------------------------------------------------
    def giveUp(msg):
        print(msg)
        parser.print_usage()
        sys.exit(1)

    if not args.justShow:

        # dataDir -----------------------------------------
        dataDir = args.dataDir

        if dataDir is None or dataDir == '':
            giveUp("you must specify a data directory")

        if dataDir[0] == '/':
            giveup("dataDir may not be an absolute path")

        if dataDir.find('..') != -1:
            giveup("path to data directory may not contain '..'")

        if os.path.exists(dataDir):
            if not os.path.isdir(dataDir):
                giveUp("dataDir %s exists and is not a directory" % dataDir)

            if args.force:
                try:
                    rmtree(dataDir)
                except Exception as e:
                    print("tried to delete %s; ignoring %s" % (
                        dataDir, e))
            else:
                giveup(
                    "data directory '%s' already exists; add -f to continue" %
                    dataDir)

        # uDir --------------------------------------------
        if not args.uPath:
            giveUp("you must specify uDir")
        elif os.path.exists(args.uPath) and not os.path.isdir(args.uPath):
            giveUp("uDir %s is not a directory" % args.uPath)

        if not os.path.exists(args.uPath):
            # XXX could/should check path
            os.mkdir(args.uPath, 0o755)

        # listFile ----------------------------------------
        if not args.listFile or args.listFile == '':
            giveUp('no build list file specified')

        if args.testing:
            if args.listFile[0] == '/':
                args.listFile = args.listFile[1:]
            args.listFile = os.path.join('tmp', args.listFile)

        if not os.path.isfile(args.listFile):
            giveUp("list file %s does not exist" % args.listFile)

    # complete setup ------------------------------------------------

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (APP_NAME, __version_date__))

    if args.verbose or args.justShow:
        print('dataDir      = ' + str(args.dataDir))
        print('exclusions   = ' + str(args.exclusions))
        print('force        = ' + str(args.force))
        print('keyFile      = ' + str(args.keyFile))
        print('listFile     = ' + str(args.listFile))
        print('matchOn      = ' + str(args.matchOn))
        print('testing      = ' + str(args.testing))
        print('uPath        = ' + str(args.uPath))
        print('verbose      = ' + str(args.verbose))
        print('verifying    = %s' % (args.keyFile != ''))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    makeDataDir(args)


if __name__ == '__main__':
    main()
