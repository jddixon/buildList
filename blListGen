#!/usr/bin/python3
#
# ~/dev/py/buildList/blListGen

import base64, hashlib, os, sys
from argparse   import ArgumentParser
from Crypto.PublicKey import RSA
from Crypto.Hash      import SHA    # presumably 1
from Crypto.Signature import PKCS1_PSS

from buildList  import *

def writeData(f, line):
    # DEBUG
    print(line)
    # END
    f.write (line)
    f.write(CRLF)

def writeDataUpdating(f, digest, line):
    # DEBUG
    print(line)
    # END
    digest.update(line)
    f.write (line)
    f.write(CRLF)

def writeLine(f, line):
    # DEBUG
    print(line)
    # END
    line = line.encode('utf-8')
    f.write (line)
    f.write(CRLF)

def writeLineUpdating(f, digest, line):
    # DEBUG
    print(line)
    # END
    line = line.encode('utf-8')
    digest.update(line)
    f.write (line)
    f.write(CRLF)

def walkDir(f, digest, dirPath):
    files = os.listdir(dirPath)
    files.sort()
    for file in files:
        pathToFile = os.path.join(dirPath, file)
        if os.path.isfile(pathToFile):
            b64Hash = base64SHA1File(pathToFile)
            line = b64Hash + ' ' + pathToFile
            writeLineUpdating(f, digest, line)
        elif os.path.isdir(pathToFile):
            walkDir(f, digest, pathToFile)
        else:
            print("can't handle %s" % pathToFile)

def makeListing(args):

    # this is here because assignment of args.keyFile to None fails
    if args.keyFile and args.keyFile != "":
        keyFile = args.keyFile
    else:
        keyFile = None
    
    # this is here because assignment of args.uDir to None fails
    if args.uDir and args.uDir != "":
        uDir = args.uDir
    else:
        uDir = None

    listFile    = args.listFile
    now         = args.now
    rootDir     = args.rootDir
    testing     = args.testing
    title       = args.title
    verbose     = args.verbose
  
    digest = hashlib.new('sha1')

    with open(listFile, "wb") as f:
        writeLineUpdating(f, digest, title.encode('utf-8'))
        writeLineUpdating(f, digest, now.encode('utf-8'))
        if keyFile:
            print("*** no support for dig sig yet ***")
            # XXX PUBKEY STUB XXX
        writeLine(f, CONTENT_START)
        walkDir(f, digest, rootDir)
        writeLine(f, CONTENT_END)
        if keyFile:
            # XXX DIGSIG STUB XX
            print("*** no support for dig sig yet ***")
        else:
            hash = digest.digest()
            b64Hash = base64.standard_b64encode(hash)
            writeLine(f, b64Hash)
            

def main():
    """
    Expect a command like
        blListGen [options] 

    """

    # program defaults ----------------------------------------------

    now = timestampNow()

    # parse the command line ----------------------------------------
    
    DESC = 'generate build list for directory, optionally populating uDir'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--listFile', 
        help='path to build list')
    
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-k', '--keyFile',
        help='path to RSA private key if signing')

    parser.add_argument('-r', '--rootDir',
        help='root directory for build list (REQUIRED)')

    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-t', '--title', 
        help='title for build list')

    parser.add_argument('-u', '--uDir', 
        help='path to uDir (relative to tmp/ if testing)')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    args.now = now
    if args.testing and args.rootDir:
        if args.rootDir[0] == '/':
            args.rootDir = args.rootDir[1:]
        args.rootDir = os.path.join('tmp', args.rootDir)

    # sanity checks -------------------------------------------------
    if (not args.rootDir) or (args.rootDir == ''):
        print("no root directory specified, cannot continue")
        parser.print_help()
        sys.exit(1)

    if not args.justShow and not os.path.isdir(args.rootDir):
        print("root directory %s does not exist, cannot continue" % args.rootDir)
        parser.print_help()
        sys.exit(1)

    # fixups --------------------------------------------------------

    # uDir ------------------------------------------------
    if args.testing and args.uDir:
        if args.uDir[0] == '/':
            args.uDir = args.uDir[1:]
        args.uDir = os.path.join('tmp', args.uDir)

    # title -----------------------------------------------
    if not args.title or args.title == '':
        junk, sep, base = args.rootDir.rpartition('/')
        args.title = base
    else:
        # this can contain spaces and other undesirable characters
        base = args.title

    # listFile --------------------------------------------
    if not args.listFile or args.listFile == '':
        args.listFile = base + ".bld"

    if args.testing:
        if args.listFile[0] == '/':
            args.listFile = args.listFile[1:]
        args.listFile = os.path.join('tmp', args.listFile)

    # private key file ------------------------------------
    if args.keyFile:
        if args.keyFile == '':
            args.keyFile = None
        else:
            if args.testing:
                if args.keyFile[0] == '/':
                    args.keyFile = args.keyFile[1:]
                args.keyFile = os.path.join('tmp', args.keyFile)
            if not args.justShow and not os.path.isfile(args.keyFile):
                print("key file %s does not exist, cannot continue" % args.keyFile)
                sys.exit(1)
    
    # complete setup ------------------------------------------------
    appName = 'blListGen %s' % __version__
    args.title = str(args.title)

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('justShow     = ' + str(args.justShow))
        print('keyFile      = ' + str(args.keyFile))
        print('listFile     = ' + str(args.listFile))
        print('timestamp    = ' + str(args.now))
        print('rootDir      = ' + str(args.rootDir))
        print('testing      = ' + str(args.testing))
        print('title        = ' + str(args.title))
        print('uDir         = ' + str(args.uDir))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    makeListing(args)

        
if __name__ == '__main__':
    main()

