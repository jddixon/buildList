#!/usr/bin/python3
#
# ~/dev/py/buildList/blCheck

import os
import re
import sys

from argparse import ArgumentParser
from nlhtree import NLHTree
from xlattice import (Q, checkUsingSHA,
                      parseUsingSHA, fixUsingSHA, showUsingSHA, checkUPath)
from xlattice.util import getExclusions, makeExRE

from buildList import __file__, BuildList


def checkBuildList(args):

    dataDir = args.dataDir  # _without_ trailing slash
    exRE = makeExRE(args.excl)
    listFile = args.listFile
    verbose = args.verbose
    uPath = args.uPath
    usingSHA = args.usingSHA

    if dataDir and dataDir[-1] == '/':      # trailing slash
        dataDir = dataDir[:-1]
    if uPath and uPath[-1] == '/':            # trailing slash
        uPath = uPath[:-1]

    bl = None
    data = None
    ok = False
    signed = False

    try:
        # can't use 'r' which converts CRLF to just LF
        with open(listFile, 'rb') as f:
            data = f.read()
            ok = True     # no exceptions
    except Exception as e:
        print("error reading build list file: '%s'" % e)

    if ok:
        ok = False
        try:
            bl = BuildList.parse(data, usingSHA)
            ok = True
        except Exception as e:
            print("error parsing BuildList: '%s'" % e)

    if ok:
        signed = bl.signed
        if signed:
            ok = bl.verify
            if not ok:
                print("dig sig verification fails")

    if ok:
        usingSHA = bl.usingSHA
        # assume exRE can be ignored
        myTree = NLHTree.createFromFileSystem(dataDir, usingSHA, exRE)
        ok = myTree == bl.tree
        if not ok:
            print("build list's NLHTree doesn't match %s" % dataDir)
            print("NLHTree for %s:\n%s" % (dataDir, myTree))
            print("NLHTree for BuildList:\n%s" % bl.tree)

    if ok and uPath:
        unmatched = bl.tree.checkInUDir(uPath)
        if unmatched:
            print("BuildList, dataDir, and uPath are inconsistent")
            for u in unmatched:
                print("  %s is in the tree but not found in uPath" % u)

    if ok:
        print("ok")


def main():
    """
    Expect a command like
        blCheck [options]

    """

    # program defaults ----------------------------------------------

    __version__ = re.search("__version__\s*=\s*'(.*)'",
                            open(__file__).read()).group(1)
    __version_date__ = re.search("__version_date__\s*=\s*'(.*)'",
                                 open(__file__).read()).group(1)

    # parse the command line ----------------------------------------

    DESC = 'verify integrity of build list, optionally agains root dir and uPath"'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--listFile',
                        help='root directory for build list')

    parser.add_argument('-d', '--dataDir',
                        help='root directory for build list')

    parser.add_argument('-i', '--ignoreFile', default='.gitignore',
                        help='file containing wildcards (globs) for files to ignore')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    # -1,-2,-3, usingSHA, -v/--verbose
    parseUsingSHA(parser)

    args = parser.parse_args()

    # fixups --------------------------------------------------------

    fixUsingSHA(args)

    args.curDir = os.getcwd()
    if os.path.exists(args.ignoreFile):
        args.excl = getExclusions(args.curDir)
    else:
        print("WARNING: ignore file '%s' NOT FOUND" % ignoreFile)
        args.excl = []
    if not 'build' in args.excl:
        args.excl.append('build')

    # sanity checks -------------------------------------------------
    checkUsingSHA(args.usingSHA)
    if (not args.justShow):
        if not args.listFile or (not os.path.isfile(args.listFile)):
            print("list file %s does not exist" % args.listFile)
            parser.print_usage()
            sys.exit(1)

        if (not args.dataDir) or (args.dataDir == ''):
            print("no root directory specified")
            parser.print_usage()
            sys.exit(1)

        if not os.path.isdir(args.dataDir):
            print("root directory %s does not exist" % args.dataDir)
            parser.print_usage()
            sys.exit(1)

        checkUPath(parser, args, mustExist=True)

    # complete setup ------------------------------------------------
    appName = 'blCheck %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('dataDir      = ' + str(args.dataDir))
        print('ignoreFile   = ' + str(args.ignoreFile))
        print('listFile     = ' + str(args.listFile))
        showUsingSHA(args)

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    checkBuildList(args)


if __name__ == '__main__':
    main()
