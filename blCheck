#!/usr/bin/python3
#
# ~/dev/py/buildList/blCheck

import base64
import hashlib
import os
import sys
from argparse import ArgumentParser
from nlhtree import NLHTree
from buildList import *


def checkBuildList(args):

    listFile = args.listFile
    rootDir = args.rootDir  # _without_ trailing slash
    verbose = args.verbose
    uDir = args.uDir
    usingSHA1 = args.usingSHA1

    if rootDir and rootDir[-1] == '/':      # trailing slash
        rootDir = rootDir[:-1]
    if uDir and uDir[-1] == '/':            # trailing slash
        uDir = uDir[:-1]

    bl = None
    data = None
    ok = False
    signed = False

    try:
        # can't use 'r' which converts CRLF to just LF
        with open(listFile, 'rb') as f:
            data = f.read()
            ok = True     # no exceptions
    except Exception as e:
        print("error reading build list file: '%s'" % e)

    if ok:
        ok = False
        try:
            bl = BuildList.parse(data, usingSHA1)
            ok = True
        except Exception as e:
            print("error parsing BuildList: '%s'" % e)

    if ok:
        signed = bl.signed
        if signed:
            ok = bl.verify
            if not ok:
                print("dig sig verification fails")

    if ok:
        usingSHA1 = bl.usingSHA1
        # assume exRE can be ignored
        myTree = NLHTree.createFromFileSystem(rootDir, usingSHA1)
        ok = myTree == bl.tree
        if not ok:
            print("build list's NLHTree doesn't match %s" % rootDir)
            print("NLHTree for %s:\n%s" % (rootDir, myTree))
            print("NLHTree for BuildList:\n%s" % bl.tree)

    if ok and uDir:
        unmatched = bl.tree.checkInUDir(uDir)
        if unmatched:
            print("BuildList, rootDir, and uDir are inconsistent")
            for u in unmatched:
                print("  %s is in the tree but not found in uDir" % u)

    if ok:
        print("ok")


def main():
    """
    Expect a command like
        blCheck [options]

    """

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------

    DESC = 'verify integrity of build list, optionally agains root dir and uDir"'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-1', '--usingSHA1', action='store_true',
                        help='using the 160-bit SHA1 hash')

    parser.add_argument('-b', '--listFile',
                        help='root directory for build list')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show options and exit')

    parser.add_argument('-r', '--rootDir',
                        help='root directory for build list')

    parser.add_argument('-u', '--uDir',
                        help='path to uDir')

    parser.add_argument('-v', '--verbose', action='store_true',
                        help='be chatty')

    args = parser.parse_args()

    # fixups --------------------------------------------------------

    # sanity checks -------------------------------------------------
    if (not args.justShow):
        if not args.listFile or (not os.path.isfile(args.listFile)):
            print("list file %s does not exist" % args.listFile)
            parser.print_usage()
            sys.exit(1)

        if (not args.rootDir) or (args.rootDir == ''):
            print("no root directory specified")
            parser.print_usage()
            sys.exit(1)

        if not os.path.isdir(args.rootDir):
            print("root directory %s does not exist" % args.rootDir)
            parser.print_usage()
            sys.exit(1)

        if args.uDir and not os.path.isdir(args.uDir):
            print("uDir directory %s is not a directory" % args.uDir)
            parser.print_usage()
            sys.exit(1)

    # complete setup ------------------------------------------------
    appName = 'blCheck %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print("%s %s" % (appName, __version_date__))

    if args.verbose or args.justShow:
        print('listFile     = ' + str(args.listFile))
        print('rootDir      = ' + str(args.rootDir))
        print('uDir         = ' + str(args.uDir))
        print('verbose      = ' + str(args.verbose))

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    checkBuildList(args)


if __name__ == '__main__':
    main()
