#!/usr/bin/python
#
# ~/dev/py/buildList/blListGen

import hashlib, os, sys
from argparse   import ArgumentParser
from buildList  import *

def readLine(f):
    line = f.readline()
    # DEBUG
    print line
    # END

def readLineUpdating(f, digest):
    line = f.readline()
    # DEBUG
    print line
    # END
    digest.update(line)
    f.write (line + CRLF)

# XXX This is WRONG
def walkDir(f, digest, dirPath):
    files = os.listdir(dirPath)
    files.sort()
    for file in files:
        pathToFile = os.path.join(dirPath, file)
        if os.path.isfile(pathToFile):
            b64Hash = base64SHA1File(pathToFile)
            line = b64Hash + ' ' + pathToFile
            writeLineUpdating(f, digest, line)
        elif os.path.isdir(pathToFile):
            walkDir(f, digest, pathToFile)
        else:
            print "can't handle %s" % pathToFile

def checkListing(args):

    # this is here because assignment of args.keyFile to None fails
    if args.keyFile and args.keyFile != "":
        keyFile = args.keyFile
    else:
        keyFile = None
    
    # this is here because assignment of args.rootDir to None fails
    if args.rootDir and args.rootDir != "":
        rootDir = args.rootDir
    else:
        rootDir = None

    # this is here because assignment of args.uDir to None fails
    if args.uDir and args.uDir != "":
        uDir = args.uDir
    else:
        uDir = None

    listFile    = args.listFile
    testing     = args.testing
    verbose     = args.verbose
  
    digest = hashlib.new('sha1')

    # XXX This reads the file but is nonsensical in the context; 
    # we need a simple parser.
    with open(listFile, "rU") as f:
        line = f.readline()
        while line:
            lenLine = len(line)
            if line.endswith(CRLF):
                line = line[:lenLine-2]
            elif line.endswith(LF):
                line = line[:lenLine-1]
            # XXX otherwise we have an error
            print line
            line = f.readline()

    # XXX STUB XX

def main():
    """
    Expect a command like
        blListGen [options] 

    """

    # program defaults ----------------------------------------------

    # parse the command line ----------------------------------------
    
    DESC = 'verify integrity of build list, optionally agains root dir and uDir"'
    parser = ArgumentParser(description=DESC)

    parser.add_argument('-b', '--listFile', 
        help='root directory for build list')
    
    parser.add_argument('-j', '--justShow', action='store_true',
        help='show options and exit')

    parser.add_argument('-k', '--keyFile',
        help='path to RSA private key if signing')

    parser.add_argument('-r', '--rootDir',
        help='root directory for build list')

    parser.add_argument('-T', '--testing', action='store_true',
        help='this is a test run')

    parser.add_argument('-u', '--uDir', 
        help='path to uDir (relative to tmp/ if testing)')

    parser.add_argument('-v', '--verbose', action='store_true',
        help='be chatty')

    args = parser.parse_args()

    # fixups --------------------------------------------------------
    if args.testing and args.listFile:
        if args.listFile[0] == '/':
            args.listFile = args.listFile[1:]
        args.listFile = os.path.join('tmp', args.listFile)

    # sanity checks -------------------------------------------------
    if not args.justShow and not args.listFile or args.listFile == '':
        print "no list file specified, cannot continue"
        sys.exit(1)

    if not args.justShow and not os.path.isfile(args.listFile):
        print "list file %s does not exist, cannot continue" % args.listFile
        sys.exit(1)

    # fixups --------------------------------------------------------

    # rootDir --------------------------------------------
    if not args.rootDir or args.rootDir == '':
        args.rootDir = None

    if args.testing and args.rootDir:
        if args.rootDir[0] == '/':
            args.rootDir = args.rootDir[1:]
        args.rootDir = os.path.join('tmp', args.rootDir)

    if not args.justShow and args.rootDir and not os.path.isdir(args.rootDir):
        print "root directory %s does not exist, cannot continue" % args.rootDir
        sys.exit(1)
    
    # private key file ------------------------------------
    if args.keyFile:
        if args.keyFile == '':
            args.keyFile = None
        else:
            if args.testing:
                if args.keyFile[0] == '/':
                    args.keyFile = args.keyFile[1:]
                args.keyFile = os.path.join('tmp', args.keyFile)
            if not args.justShow and not os.path.isfile(args.keyFile):
                print "key file %s does not exist, cannot continue" % args.keyFile
                sys.exit(1)
    
    # complete setup ------------------------------------------------
    appName = 'blListGen %s' % __version__

    # maybe show options and such -----------------------------------
    if args.verbose or args.justShow:
        print "%s %s" % (appName, __version_date__)

    if args.verbose or args.justShow:
        print 'keyFile      = ' + str(args.keyFile)
        print 'listFile     = ' + str(args.listFile)
        print 'rootDir      = ' + str(args.rootDir)
        print 'testing      = ' + str(args.testing)
        print 'uDir         = ' + str(args.uDir)
        print 'verbose      = ' + str(args.verbose)

    if args.justShow:
        sys.exit(0)

    # do what's required --------------------------------------------
    checkListing(args)

        
if __name__ == '__main__':
    main()

